class Elemento:
    def __init__(self, valores, pesos):
        self.valores = valores
        self.pesos = pesos

def mochila_fuerza_bruta(W, elementos):
    n = len(elementos.valores)
    mejor_valor = 0
    mejor_combinacion = None

    # Generar todas las posibles combinaciones de elementos
    for i in range(1 << n):  # Iteramos sobre todos los posibles subconjuntos de elementos
        valor_actual = 0
        peso_actual = 0
        combinacion_actual = []

        for j in range(n):
            if i & (1 << j):  # Si el j-ésimo bit de i está activado
                valor_actual += elementos.valores[j]
                peso_actual += elementos.pesos[j]
                combinacion_actual.append(j)  # Guardamos el índice del elemento seleccionado

        # Verificar si la combinación actual es válida y si su valor es mejor que el mejor valor encontrado hasta ahora
        if peso_actual <= W and valor_actual > mejor_valor:
            mejor_valor = valor_actual
            mejor_combinacion = combinacion_actual

    return mejor_valor, mejor_combinacion

# Datos
W = 4
elementos = Elemento([31, 47, 14], [2, 3, 1])
max_valor, art_seleccionados = mochila_fuerza_bruta(W, elementos)
print("Valor máximo que se puede obtener:", max_valor)
print("Artículos seleccionados:", art_seleccionados)
